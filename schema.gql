# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserAccount {
  id: Float!
  username: String!
}

type AccessToken {
  token: String!
}

type TodoItem {
  id: Int!
  title: String!
  completed: Boolean!
  created: DateTime!
  updated: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TodoItemDeleteResponse {
  id: Int
  title: String
  completed: Boolean
  created: DateTime
  updated: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type TodoItemEdge {
  """The node containing the TodoItem"""
  node: TodoItem!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type TodoItemConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TodoItemEdge!]!
}

type TodoItemCountAggregate {
  id: Int
  title: Int
  completed: Int
}

type TodoItemSumAggregate {
  id: Float
}

type TodoItemAvgAggregate {
  id: Float
}

type TodoItemMinAggregate {
  id: Int
  title: String
}

type TodoItemMaxAggregate {
  id: Int
  title: String
}

type Query {
  me: UserAccount!
  todoItem(
    """The id of the record to find."""
    id: ID!
  ): TodoItem
  todoItems(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: TodoItemFilter = {}

    """Specify to sort results."""
    sorting: [TodoItemSort!] = []
  ): TodoItemConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input TodoItemFilter {
  and: [TodoItemFilter!]
  or: [TodoItemFilter!]
  id: IntFieldComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input TodoItemSort {
  field: TodoItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TodoItemSortFields {
  id
  title
  completed
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  login(input: LoginInput!): AccessToken!
  createOneTodoItem(input: CreateOneTodoItemInput!): TodoItem!
  createManyTodoItems(input: CreateManyTodoItemsInput!): [TodoItem!]!
  updateOneTodoItem(input: UpdateOneTodoItemInput!): TodoItem!
  updateManyTodoItems(input: UpdateManyTodoItemsInput!): UpdateManyResponse!
  deleteOneTodoItem(input: DeleteOneInput!): TodoItemDeleteResponse!
  deleteManyTodoItems(input: DeleteManyTodoItemsInput!): DeleteManyResponse!
}

input LoginInput {
  username: String!
  password: String!
}

input CreateOneTodoItemInput {
  """The record to create"""
  todoItem: CreateTodoItem!
}

input CreateTodoItem {
  id: Int
  title: String
  completed: Boolean
  created: DateTime
  updated: DateTime
}

input CreateManyTodoItemsInput {
  """Array of records to create"""
  todoItems: [CreateTodoItem!]!
}

input UpdateOneTodoItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTodoItem!
}

input UpdateTodoItem {
  id: Int
  title: String
  completed: Boolean
  created: DateTime
  updated: DateTime
}

input UpdateManyTodoItemsInput {
  """Filter used to find fields to update"""
  filter: TodoItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTodoItem!
}

input TodoItemUpdateFilter {
  and: [TodoItemUpdateFilter!]
  or: [TodoItemUpdateFilter!]
  id: IntFieldComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
}

input DeleteOneInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTodoItemsInput {
  """Filter to find records to delete"""
  filter: TodoItemDeleteFilter!
}

input TodoItemDeleteFilter {
  and: [TodoItemDeleteFilter!]
  or: [TodoItemDeleteFilter!]
  id: IntFieldComparison
  title: StringFieldComparison
  completed: BooleanFieldComparison
}
